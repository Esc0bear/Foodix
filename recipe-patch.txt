# üç≥ Patch pour ajouter les endpoints de recettes

## Instructions d'installation

1. **Connectez-vous √† votre serveur Heroku** via l'interface web ou CLI
2. **Ouvrez le fichier `server.js`** dans l'√©diteur Heroku
3. **Ajoutez ce code** juste avant la ligne `app.use('*', (req, res) => {`

## Code √† ajouter

```javascript
// üç≥ Endpoints pour les recettes
// Ajout√©s le 17 septembre 2025

// üç≥ Route de g√©n√©ration de recette
app.post('/generate-recipe', async (req, res) => {
  try {
    console.log('üç≥ [RECIPE] Nouvelle demande de g√©n√©ration de recette');
    const { platform, url, author, caption, thumbnail } = req.body;
    
    console.log('üìù [RECIPE] Donn√©es re√ßues:', {
      platform,
      url,
      author,
      captionLength: caption?.length || 0,
      thumbnail: thumbnail ? 'Pr√©sent' : 'Absent'
    });

    const systemPrompt = `Tu es un expert culinaire. G√©n√®re une recette compl√®te au format JSON strict:

{
  "id": "uuid-g√©n√©r√©",
  "createdAt": "2025-09-17T13:00:00.000Z",
  "title": "Titre de la recette",
  "summary": "Description courte et app√©tissante",
  "servings": 4,
  "time": {"prep": 15, "cook": 30, "total": 45},
  "difficulty": "easy|medium|hard",
  "ingredients": [{"item": "Nom de l'ingr√©dient", "quantity": 200, "unit": "g", "notes": null}],
  "instructions": [{"step": 1, "text": "Description d√©taill√©e de l'√©tape"}],
  "nutrition": {"calories": 350, "protein": 25, "carbs": 30, "fat": 15},
  "proTips": ["Conseil de pro 1", "Conseil de pro 2"],
  "source": {"platform": "instagram", "url": "URL originale", "author": "Auteur", "thumbnail": "URL de l'image"}
}`;

    const userPrompt = `G√©n√®re une recette compl√®te √† partir de ces informations:

Plateforme: ${platform}
URL: ${url}
Auteur: ${author || 'Inconnu'}
Description: ${caption}
Image: ${thumbnail || 'Aucune'}

Cr√©e une recette d√©taill√©e, app√©tissante et facile √† suivre.`;

    console.log('üß† [RECIPE] Envoi √† OpenAI...');
    
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt }
      ],
      max_tokens: 2000,
      temperature: 0.7,
    });

    let recipeJson = completion.choices[0].message.content;
    recipeJson = recipeJson.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
    
    let recipe = JSON.parse(recipeJson);
    recipe.id = require('crypto').randomUUID();
    recipe.createdAt = new Date().toISOString();
    
    console.log('‚úÖ [RECIPE] Recette g√©n√©r√©e avec succ√®s:', {
      id: recipe.id,
      title: recipe.title,
      ingredientsCount: recipe.ingredients.length,
      instructionsCount: recipe.instructions.length
    });
    
    res.json(recipe);

  } catch (error) {
    console.error('‚ùå [RECIPE] Erreur lors de la g√©n√©ration:', error);
    
    if (error.code === 'insufficient_quota') {
      return res.status(402).json({ 
        error: 'Quota OpenAI insuffisant' 
      });
    }
    
    if (error.code === 'rate_limit_exceeded') {
      return res.status(429).json({ 
        error: 'Limite de taux OpenAI d√©pass√©e, r√©essayez dans quelques instants' 
      });
    }
    
    res.status(500).json({ 
      error: 'Erreur interne du serveur',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// ‚ú® Route de reformulation de recette
app.post('/reformulate-recipe', async (req, res) => {
  try {
    console.log('‚ú® [REFORMULATE] Nouvelle demande de reformulation');
    const { recipeId, reformulationType } = req.body;
    
    console.log('üîÑ [REFORMULATE] Param√®tres:', { recipeId, reformulationType });

    const prompts = {
      simplify: "Simplifie cette recette pour la rendre plus accessible aux d√©butants. Utilise des termes simples, r√©duis le nombre d'ingr√©dients si possible, et donne des instructions tr√®s claires.",
      detailed: "D√©taille davantage cette recette en ajoutant plus d'explications, de conseils techniques, et de variantes. Rends-la plus professionnelle et compl√®te.",
      professional: "Reformule cette recette dans un style de chef professionnel. Utilise un vocabulaire technique pr√©cis, des techniques avanc√©es, et un ton expert.",
      casual: "Reformule cette recette dans un style d√©contract√© et amical. Utilise un langage familier, des expressions courantes, et un ton chaleureux."
    };

    const systemPrompt = `Tu es un expert culinaire qui reformule des recettes selon diff√©rents styles.

Style demand√©: ${reformulationType}
Instructions: ${prompts[reformulationType]}

R√àGLES:
1. Garde la m√™me structure JSON que la recette originale
2. Adapte le contenu selon le style demand√©
3. Conserve toutes les informations essentielles
4. Am√©liore la clart√© et l'accessibilit√©
5. Garde le m√™me ID et timestamp

FORMAT DE R√âPONSE: JSON strict identique √† la recette originale`;

    const userPrompt = `Reformule cette recette (ID: ${recipeId}) selon le style "${reformulationType}".

Note: Pour cette d√©mo, g√©n√®re une recette exemple de g√¢teau au chocolat que tu reformuleras selon le style demand√©.`;

    console.log('üß† [REFORMULATE] Envoi √† OpenAI...');
    
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt }
      ],
      max_tokens: 2000,
      temperature: 0.7,
    });

    let recipeJson = completion.choices[0].message.content;
    recipeJson = recipeJson.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
    
    let recipe = JSON.parse(recipeJson);
    recipe.id = recipeId;
    recipe.createdAt = new Date().toISOString();
    
    console.log('‚úÖ [REFORMULATE] Recette reformul√©e avec succ√®s:', {
      id: recipe.id,
      title: recipe.title,
      reformulationType
    });
    
    res.json(recipe);

  } catch (error) {
    console.error('‚ùå [REFORMULATE] Erreur lors de la reformulation:', error);
    
    if (error.code === 'insufficient_quota') {
      return res.status(402).json({ 
        error: 'Quota OpenAI insuffisant' 
      });
    }
    
    if (error.code === 'rate_limit_exceeded') {
      return res.status(429).json({ 
        error: 'Limite de taux OpenAI d√©pass√©e, r√©essayez dans quelques instants' 
      });
    }
    
    res.status(500).json({ 
      error: 'Erreur interne du serveur',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// üè• Route de test pour les recettes
app.get('/test-recipe', (req, res) => {
  res.json({ 
    status: 'OK', 
    service: 'Recipe Service',
    endpoints: ['/generate-recipe', '/reformulate-recipe'],
    timestamp: new Date().toISOString()
  });
});
```

## Apr√®s l'ajout

1. **Sauvegardez** le fichier
2. **Red√©marrez** votre application Heroku
3. **Testez** avec : `https://gaby-backend-victor2024-c7b0d533c9ca.herokuapp.com/test-recipe`

## Endpoints disponibles

- `POST /generate-recipe` - G√©n√®re une recette
- `POST /reformulate-recipe` - Reformule une recette
- `GET /test-recipe` - Test de sant√©

## Format des requ√™tes

### G√©n√©ration de recette
```json
{
  "platform": "instagram",
  "url": "https://instagram.com/p/example",
  "author": "Chef Example",
  "caption": "Description de la recette",
  "thumbnail": "https://example.com/image.jpg"
}
```

### Reformulation de recette
```json
{
  "recipeId": "uuid-de-la-recette",
  "reformulationType": "simplify|detailed|professional|casual"
}
```
